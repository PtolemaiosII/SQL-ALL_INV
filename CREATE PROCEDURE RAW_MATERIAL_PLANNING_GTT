CREATE OR ALTER PROCEDURE RAW_MATERIAL_PLANNING_GTT
(
	DateRange1 					DATE = '1900-01-01',
	DateRange2 					DATE = '2050-12-31',
	ckShowProductHasEnoughStock	CHAR(1) = '1'
)
RETURNS 
(
	BOMITEMTYPE_NAME 	VARCHAR(30),
	LOW_P_NUM 			VARCHAR(70),
	LOW_P_DESCRIPTION	VARCHAR(252),
	LOW_P_DEFAULTBOMID	INTEGER,
	UOM_CODE			VARCHAR(10),
	SUM_NEW_QTY			DOUBLE PRECISION,
	QTY					DOUBLE PRECISION,
	TRADEQTY			DOUBLE PRECISION,
	ACC_NEED			DOUBLE PRECISION,
	INDICATOR			DOUBLE PRECISION,
	QTYATP				DOUBLE PRECISION,
	MIN_QTY				DOUBLE PRECISION,
	MAX_QTY				DOUBLE PRECISION,
	LEADTIME			INTEGER,
	COMPANY				VARCHAR(60)
)
AS
BEGIN

DELETE FROM GTT$INVENTORY;
DELETE FROM GTT$MLVLBOM;
DELETE FROM GTT$SOITEM;
DELETE FROM GTT$TRADEQTY;

INSERT INTO GTT$INVENTORY
SELECT
	ALL_INV.ID, 
	ALL_INV.QTY,
	ALL_INV.UNAVAILABLE,
	ALL_INV.DROPSHIP,
	ALL_INV.QTYCOMMITTED,
	ALL_INV.ALLOCATED,
	ALL_INV.ONORDER,
	ALL_INV.QTYNOTAVAILABLETOPICK
FROM ALL_INV;

INSERT INTO GTT$MLVLBOM
SELECT
	M_LVL_BOM.BOM_ID,
	M_LVL_BOM.BOMITEM_TYPEID,
	M_LVL_BOM.BOMITEMTYPE_NAME,
	M_LVL_BOM.QTY,
	M_LVL_BOM.LOW_P_ID,
	M_LVL_BOM.LOW_P_DESCRIPTION,
	M_LVL_BOM.LOW_P_NUM,
	M_LVL_BOM.LOW_P_DEFAULTBOMID,
	M_LVL_BOM.UOM_CODE,
	M_LVL_BOM.LEVEL,
	M_LVL_BOM.MOTHER_BOM
FROM M_LVL_BOM;

INSERT INTO GTT$SOITEM
SELECT
	COALESCE(GTT$MLVLBOM.BOMITEMTYPE_NAME, 'Unknown') AS BOMITEMTYPE_NAME,
	SUM((SOITEM.QTYTOFULFILL - SOITEM.QTYFULFILLED - SOITEM.QTYPICKED) * COALESCE(GTT$MLVLBOM.QTY, 1)) AS SUM_NEW_QTY,
	COALESCE(GTT$MLVLBOM.LOW_P_ID, PART.ID) AS LOW_P_ID,
	COALESCE(GTT$MLVLBOM.LOW_P_NUM, PART.NUM) AS LOW_P_NUM,
    COALESCE(GTT$MLVLBOM.LOW_P_DESCRIPTION, PART.DESCRIPTION) AS LOW_P_DESCRIPTION,
	GTT$MLVLBOM.LOW_P_DEFAULTBOMID,
	COALESCE(GTT$MLVLBOM.UOM_CODE, UOM.CODE) AS UOM_CODE
FROM
	SO
	INNER JOIN SOITEM ON SO.ID = SOITEM.SOID
	INNER JOIN PRODUCT ON SOITEM.PRODUCTID = PRODUCT.ID
	INNER JOIN PART ON PRODUCT.PARTID = PART.ID
	INNER JOIN UOM ON PART.UOMID = UOM.ID
	LEFT OUTER JOIN GTT$MLVLBOM ON PART.DEFAULTBOMID = GTT$MLVLBOM.MOTHER_BOM
WHERE
	SO.DATEISSUED BETWEEN :DateRange1 AND :DateRange2
	AND
	SO.STATUSID BETWEEN 11 AND 25
	AND
	SOITEM.STATUSID < 50
GROUP BY 1,3,4,5,6,7
HAVING 
	:ckShowProductHasEnoughStock = '1'
	OR
	SUM((SOITEM.QTYTOFULFILL - SOITEM.QTYFULFILLED - SOITEM.QTYPICKED) * COALESCE(GTT$MLVLBOM.QTY, 1)) > 0;

INSERT INTO GTT$TRADEQTY
SELECT
	PART.ID AS PART_ID,
	PART.NUM AS PART_NUM,
	GTT$MLVLBOM.LOW_P_ID,
	GTT$MLVLBOM.LOW_P_NUM,
	GTT$INVENTORY.QTY AS QTYONHAND,
	GTT$MLVLBOM.QTY,
	MINVALUE(GTT$SOITEM.SUM_NEW_QTY, (GTT$INVENTORY.QTY+GTT$INVENTORY.ONORDER)) * GTT$MLVLBOM.QTY AS TRADEQTY
FROM
    GTT$SOITEM
    INNER JOIN PART ON GTT$SOITEM.LOW_P_ID = PART.ID
	INNER JOIN GTT$MLVLBOM ON PART.DEFAULTBOMID = GTT$MLVLBOM.MOTHER_BOM
	INNER JOIN GTT$INVENTORY ON PART.ID = GTT$INVENTORY.ID
WHERE PART.ID <> GTT$MLVLBOM.LOW_P_ID;

FOR 
SELECT
	GTT$SOITEM.BOMITEMTYPE_NAME,
	GTT$SOITEM.LOW_P_NUM,
    GTT$SOITEM.LOW_P_DESCRIPTION,
	GTT$SOITEM.LOW_P_DEFAULTBOMID,
	GTT$SOITEM.UOM_CODE,
    GTT$SOITEM.SUM_NEW_QTY,
    GTT$INVENTORY.QTY,
    COALESCE(SUM(GTT$TRADEQTY.TRADEQTY),0) AS TRADEQTY,
    CASE
    WHEN GTT$SOITEM.BOMITEMTYPE_NAME LIKE 'R%' THEN GTT$SOITEM.SUM_NEW_QTY - SUM(GTT$TRADEQTY.TRADEQTY)
    ELSE MINVALUE(GTT$SOITEM.SUM_NEW_QTY, (GTT$INVENTORY.ALLOCATED - GTT$INVENTORY.QTY - GTT$INVENTORY.ONORDER + GTT$INVENTORY.DROPSHIP))
    END AS ACC_NEED,
    (GTT$INVENTORY.ALLOCATED - GTT$INVENTORY.QTY - GTT$INVENTORY.ONORDER + GTT$INVENTORY.DROPSHIP) AS INDICATOR,
    (GTT$INVENTORY.QTY - GTT$INVENTORY.QTYNOTAVAILABLETOPICK - GTT$INVENTORY.QTYCOMMITTED) AS QTYATP,
    PR.REORDERPOINT AS MIN_QTY,
    PR.ORDERUPTOLEVEL AS MAX_QTY,
    VP.LEADTIME,
    COMPANY.NAME AS COMPANY
FROM
	GTT$SOITEM
	INNER JOIN
    GTT$INVENTORY ON GTT$SOITEM.LOW_P_ID = GTT$INVENTORY.ID
    LEFT OUTER JOIN GTT$TRADEQTY ON GTT$SOITEM.LOW_P_ID = GTT$TRADEQTY.LOW_P_ID
    LEFT OUTER JOIN PARTREORDER AS PR ON GTT$SOITEM.LOW_P_ID = PR."PARTID" AND PR.LOCATIONGROUPID = (SELECT
                                                                                                    ADDRESS."LOCATIONGROUPID" AS ADDRESS_LOCATIONGROUPID
                                                                                               FROM
                                                                                                    "ACCOUNT" ACCOUNT
                                                                                                    INNER JOIN "ADDRESS" ADDRESS ON ACCOUNT."ID" = ADDRESS."ACCOUNTID"
                                                                                                    INNER JOIN "COMPANY" COMPANY ON ACCOUNT."ID" = COMPANY."ACCOUNTID"
                                                                                               WHERE
                                                                                                    COMPANY.ID = 1)
    LEFT OUTER JOIN VENDORPARTS AS VP ON (GTT$SOITEM.LOW_P_ID = VP.PARTID AND VP.DEFAULTFLAG = 1)
    JOIN COMPANY ON COMPANY.ID = 1
GROUP BY 1,2,3,4,5,6,7,10,11,12,13,14,15
HAVING
	:ckShowProductHasEnoughStock = '1'
	OR 
	(CASE WHEN GTT$SOITEM.BOMITEMTYPE_NAME LIKE 'R%' THEN GTT$SOITEM.SUM_NEW_QTY - SUM(GTT$TRADEQTY.TRADEQTY) ELSE MINVALUE(GTT$SOITEM.SUM_NEW_QTY, (GTT$INVENTORY.ALLOCATED - GTT$INVENTORY.QTY - GTT$INVENTORY.ONORDER + GTT$INVENTORY.DROPSHIP)) END) > 0
ORDER BY
	CASE WHEN GTT$SOITEM.BOMITEMTYPE_NAME LIKE 'F%' THEN 1
	     WHEN GTT$SOITEM.BOMITEMTYPE_NAME LIKE 'U%' THEN 2
	     ELSE 3 END,2
INTO 
	:BOMITEMTYPE_NAME,
	:LOW_P_NUM,
	:LOW_P_DESCRIPTION,
	:LOW_P_DEFAULTBOMID,
	:UOM_CODE,
	:SUM_NEW_QTY,
	:QTY,
	:TRADEQTY,
	:ACC_NEED,
	:INDICATOR,
	:QTYATP,
	:MIN_QTY,
	:MAX_QTY,
	:LEADTIME,
	:COMPANY
DO
	BEGIN
		SUSPEND;
	END
END

