WITH
	TMP1
AS
(SELECT
	COALESCE(TB_M_LVL_BOM.BOMITEMTYPE_NAME, 'Unknown') AS BOMITEMTYPE_NAME,
	SUM((SOITEM.QTYTOFULFILL - SOITEM.QTYFULFILLED - SOITEM.QTYPICKED) * COALESCE(TB_M_LVL_BOM.QTY, 1)) AS SUM_NEW_QTY,
	COALESCE(TB_M_LVL_BOM.LOW_P_ID, PART.ID) AS LOW_P_ID,
	COALESCE(TB_M_LVL_BOM.LOW_P_NUM, PART.NUM) AS LOW_P_NUM,
    COALESCE(TB_M_LVL_BOM.LOW_P_DESCRIPTION, PART.DESCRIPTION) AS LOW_P_DESCRIPTION,
	TB_M_LVL_BOM.LOW_P_DEFAULTBOMID,
	COALESCE(TB_M_LVL_BOM.UOM_CODE, UOM.CODE) AS UOM_CODE
FROM
	SO
	INNER JOIN SOITEM ON SO.ID = SOITEM.SOID
	INNER JOIN PRODUCT ON SOITEM.PRODUCTID = PRODUCT.ID
	INNER JOIN PART ON PRODUCT.PARTID = PART.ID
	INNER JOIN UOM ON PART.UOMID = UOM.ID
	LEFT OUTER JOIN TB_M_LVL_BOM ON PART.DEFAULTBOMID = TB_M_LVL_BOM.MOTHER_BOM
WHERE
	SO.DATEISSUED BETWEEN $P{dateRange1} AND $P{dateRange2}
	AND
	SO.STATUSID BETWEEN 11 AND 25
	AND
	SOITEM.STATUSID < 50
GROUP BY 1,3,4,5,6,7
$P!{ckShowProductHasEnoughStock}HAVING SUM((SOITEM.QTYTOFULFILL - SOITEM.QTYFULFILLED - SOITEM.QTYPICKED) * COALESCE(TB_M_LVL_BOM.QTY, 1)) > 0
),
    TMP2
AS
(SELECT
	PART.ID,
	PART.NUM,
    --TMP1.SUM_NEW_QTY,
	TB_M_LVL_BOM.LOW_P_ID,
	TB_M_LVL_BOM.LOW_P_NUM,
	TB_INVENTORY.QTY AS QTYONHAND,
	TB_M_LVL_BOM.QTY,
	MINVALUE(TMP1.SUM_NEW_QTY, (TB_INVENTORY.QTY+TB_INVENTORY.ONORDER)) * TB_M_LVL_BOM.QTY AS TRADEQTY
FROM
    TMP1
    INNER JOIN PART ON TMP1.LOW_P_ID = PART.ID
	INNER JOIN TB_M_LVL_BOM ON PART.DEFAULTBOMID = TB_M_LVL_BOM.MOTHER_BOM
	INNER JOIN TB_INVENTORY ON PART.ID = TB_INVENTORY.ID
WHERE PART.ID <> TB_M_LVL_BOM.LOW_P_ID
)


SELECT
	BOMITEMTYPE_NAME,
	TMP1.LOW_P_NUM,
    TMP1.LOW_P_DESCRIPTION,
	TMP1.LOW_P_DEFAULTBOMID,
	UOM_CODE,
    SUM_NEW_QTY,
    TB_INVENTORY.QTY,
    COALESCE(SUM(TRADEQTY),0) AS TRADEQTY,
    CASE
    WHEN BOMITEMTYPE_NAME LIKE 'R%' THEN SUM_NEW_QTY - SUM(TRADEQTY)
    ELSE MINVALUE(SUM_NEW_QTY, (TB_INVENTORY.ALLOCATED - TB_INVENTORY.QTY - TB_INVENTORY.ONORDER + TB_INVENTORY.DROPSHIP))
    END AS ACC_NEED,
    (TB_INVENTORY.ALLOCATED - TB_INVENTORY.QTY - TB_INVENTORY.ONORDER + TB_INVENTORY.DROPSHIP) AS INDICATOR,
    (TB_INVENTORY.QTY - TB_INVENTORY.QTYNOTAVAILABLETOPICK - TB_INVENTORY.QTYCOMMITTED) AS QTYATP,
    PR.REORDERPOINT AS MIN_QTY,
    PR.ORDERUPTOLEVEL AS MAX_QTY,
    VP.LEADTIME,
    COMPANY.NAME AS COMPANY
FROM
	TMP1
	INNER JOIN
    TB_INVENTORY ON TMP1.LOW_P_ID = TB_INVENTORY.ID
    LEFT OUTER JOIN TMP2 ON TMP1.LOW_P_ID = TMP2.LOW_P_ID
    LEFT OUTER JOIN PARTREORDER AS PR ON TMP1.LOW_P_ID = PR."PARTID" AND PR.LOCATIONGROUPID = (SELECT
                                                                                                    ADDRESS."LOCATIONGROUPID" AS ADDRESS_LOCATIONGROUPID
                                                                                               FROM
                                                                                                    "ACCOUNT" ACCOUNT
                                                                                                    INNER JOIN "ADDRESS" ADDRESS ON ACCOUNT."ID" = ADDRESS."ACCOUNTID"
                                                                                                    INNER JOIN "COMPANY" COMPANY ON ACCOUNT."ID" = COMPANY."ACCOUNTID"
                                                                                               WHERE
                                                                                                    COMPANY.ID = 1)
    LEFT OUTER JOIN VENDORPARTS AS VP ON (TMP1.LOW_P_ID = VP.PARTID AND VP.DEFAULTFLAG = 1)
    JOIN COMPANY ON COMPANY.ID = 1
GROUP BY 1,2,3,4,5,6,7,10,11,12,13,14,15
$P!{ckShowProductHasEnoughStock}HAVING (CASE WHEN BOMITEMTYPE_NAME LIKE 'R%' THEN SUM_NEW_QTY - SUM(TRADEQTY) ELSE MINVALUE(SUM_NEW_QTY, (TB_INVENTORY.ALLOCATED - TB_INVENTORY.QTY - TB_INVENTORY.ONORDER + TB_INVENTORY.DROPSHIP)) END) > 0
ORDER BY
	CASE WHEN BOMITEMTYPE_NAME LIKE 'F%' THEN 1
	     WHEN BOMITEMTYPE_NAME LIKE 'U%' THEN 2
	     ELSE 3 END,2
