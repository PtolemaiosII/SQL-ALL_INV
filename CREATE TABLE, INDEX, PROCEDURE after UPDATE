CREATE TABLE TB_INVENTORY
(ID INTEGER NOT NULL,
QTY DOUBLE PRECISION,
UNAVAILABLE DOUBLE PRECISION,
DROPSHIP DOUBLE PRECISION,
QTYCOMMITTED DOUBLE PRECISION,
ALLOCATED DOUBLE PRECISION,
ONORDER DOUBLE PRECISION,
QTYNOTAVAILABLETOPICK DOUBLE PRECISION,
PRIMARY KEY (ID));

CREATE TABLE TB_M_LVL_BOM
(BOM_ID INTEGER NOT NULL,
BOMITEM_TYPEID INTEGER,
BOMITEMTYPE_NAME VARCHAR(30),
QTY DOUBLE PRECISION,
LOW_P_ID INTEGER NOT NULL,
LOW_P_DESCRIPTION VARCHAR(252),
LOW_P_NUM VARCHAR(70),
LOW_P_DEFAULTBOMID INTEGER,
UOM_CODE VARCHAR(10),
LEVEL INTEGER,
MOTHER_BOM INTEGER NOT NULL,
PRIMARY KEY (BOM_ID, LOW_P_ID, MOTHER_BOM));

CREATE INDEX INDEX_LOW_P_NUM 
	ON TB_M_LVL_BOM (LOW_P_NUM);
	
CREATE INDEX INDEX_BOM_ID 
	ON TB_M_LVL_BOM (BOM_ID);

CREATE INDEX INDEX_LOW_P_ID 
	ON TB_M_LVL_BOM (LOW_P_ID);

CREATE INDEX INDEX_MOTHER_BOM 
	ON TB_M_LVL_BOM (MOTHER_BOM);
	

CREATE VIEW ALL_INV (ID,QTY,UNAVAILABLE,DROPSHIP,QTYCOMMITTED,ALLOCATED,ONORDER,QTYNOTAVAILABLETOPICK) AS  
 
 SELECT
    part.id,
    COALESCE((SELECT SUM(qtyonhand.qty)
                FROM qtyonhand
               WHERE qtyonhand.partid = part.id), 0) AS qty,
    COALESCE((SELECT SUM(qtynotavailable.qty)
                FROM qtynotavailable
               WHERE qtynotavailable.partid = part.id), 0) AS Unavailable,
    COALESCE((SELECT SUM(qtydropship.qty)
                FROM qtydropship
               WHERE qtydropship.partid = part.id), 0) AS DropShip,
    COALESCE((SELECT SUM(qtycommitted.qty)
                FROM qtycommitted
               WHERE qtycommitted.partid = part.id), 0) AS qtycommitted,
    COALESCE((SELECT SUM(QtyAllocated.qty)
                FROM QtyAllocated
               WHERE QtyAllocated.partID = Part.id), 0) AS allocated,
    COALESCE((SELECT SUM(qtyonorder.qty)
                FROM qtyonorder
               WHERE qtyonorder.partid = part.id), 0) AS onorder,
    COALESCE((SELECT SUM(QtyNotAvailabletopick.qty)
                FROM QtyNotAvailabletopick
               WHERE QtyNotAvailabletopick.partid = part.id), 0) AS qtyNotAvailabletoPick

FROM part
WHERE
      part.id != 0
  AND part.typeid = 10
  AND part.activeflag = 1
ORDER BY part.id;

CREATE VIEW CHECK1 (PARTID,BACK_ORDER) AS  
 
 SELECT
    QT.PARTID AS PARTID,
    SUM(QT.QTYALLOCATED - QT.QTYONHAND - QT.QTYONORDER) AS BACK_ORDER
FROM QTYINVENTORYTOTALS AS QT
GROUP BY PARTID;


CREATE VIEW M_LVL_BOM (BOM_ID,BOMITEM_TYPEID,BOMITEMTYPE_NAME,QTY,LOW_P_ID,LOW_P_DESCRIPTION,LOW_P_NUM,LOW_P_DEFAULTBOMID,UOM_CODE,LEVEL,MOTHER_BOM) AS  
 
 WITH RECURSIVE
      BOMBUILD_M
AS
(
SELECT
     BOM."ID" AS BOM_ID,
     BOMITEM."TYPEID" AS BOMITEM_TYPEID,
     BOMITEMTYPE."NAME" AS BOMITEMTYPE_NAME,
     BOMITEM.QUANTITY AS QTY,
     LOW_P."ID" AS LOW_P_ID,
     LOW_P."DESCRIPTION" AS LOW_P_DESCRIPTION,
     LOW_P."NUM" AS LOW_P_NUM,
     LOW_P."DEFAULTBOMID" AS LOW_P_DEFAULTBOMID,
     UOM."CODE" AS UOM_CODE,
     1 AS LEVEL,
     BOM."ID" AS MOTHER_BOM
FROM
     ("BOM" BOM INNER JOIN "BOMITEM" BOMITEM ON BOM."ID" = BOMITEM."BOMID"
     INNER JOIN "BOMITEMTYPE" BOMITEMTYPE ON BOMITEM."TYPEID" = BOMITEMTYPE."ID"
     INNER JOIN "PART" LOW_P ON BOMITEM."PARTID" = LOW_P."ID"
     INNER JOIN "UOM" UOM ON BOMITEM."UOMID" = UOM."ID")
WHERE
    LOW_P.TYPEID = 10
    AND
    LOW_P."NUM" NOT LIKE 'SF%'
UNION ALL
SELECT
     BOM."ID" AS BOM_ID,
     BOMITEM."TYPEID" AS BOMITEM_TYPEID,
     BOMITEMTYPE."NAME" AS BOMITEMTYPE_NAME,
     (BOMITEM.QUANTITY*BOMBUILD_M.QTY) AS QTY,
     LOW_P."ID" AS LOW_P_ID,
     LOW_P."DESCRIPTION" AS LOW_P_DESCRIPTION,
     LOW_P."NUM" AS LOW_P_NUM,
     LOW_P."DEFAULTBOMID" AS LOW_P_DEFAULTBOMID,
     UOM."CODE" AS UOM_CODE,
     (BOMBUILD_M."LEVEL" + 1) AS LEVEL,
     BOMBUILD_M."MOTHER_BOM" AS MOTHER_BOM
FROM
     ("BOM" BOM INNER JOIN "BOMITEM" BOMITEM ON BOM."ID" = BOMITEM."BOMID"
     INNER JOIN "BOMITEMTYPE" BOMITEMTYPE ON BOMITEM."TYPEID" = BOMITEMTYPE."ID"
     INNER JOIN "PART" LOW_P ON BOMITEM."PARTID" = LOW_P."ID"
     INNER JOIN "UOM" UOM ON BOMITEM."UOMID" = UOM."ID")
     INNER JOIN "BOMBUILD_M" BOMBUILD_M ON (BOM."ID" = BOMBUILD_M."LOW_P_DEFAULTBOMID" AND BOMBUILD_M.BOMITEM_TYPEID <> 10)
WHERE
    BOMITEM.TYPEID = 20
    AND
    LOW_P.TYPEID = 10
    AND
    LOW_P."NUM" NOT LIKE 'SF%'
)
SELECT *
FROM BOMBUILD_M;

CREATE VIEW RANKED_MEMO (DATECREATED,MEMO,RECORDID,TABLEID,USERNAME,RANK,REV_RANK,OVERALL_RANK,TABLENAME,REF) AS  
      SELECT
	M.DATECREATED AS DATECREATED,
	M.MEMO AS MEMO,
	M.RECORDID AS RECORDID,
	M.TABLEID AS TABLEID,
	M.USERNAME AS USERNAME,
	COUNT(M2.DATECREATED)+1 AS RANK,
	COUNT(M3.DATECREATED)+1 AS REV_RANK,
    OVER.OVERALL_RANK,
	T.TABLEREFNAME AS TABLENAME,
	COALESCE(PO.NUM, PART.NUM, VENDOR.NAME, CUSTOMER.NAME) AS REF
FROM
	MEMO AS M
	LEFT OUTER JOIN MEMO AS M2 ON (M2.RECORDID = M.RECORDID AND M2.DATECREATED < M.DATECREATED)
	LEFT OUTER JOIN MEMO AS M3 ON (M3.RECORDID = M.RECORDID AND M3.DATECREATED > M.DATECREATED)
    INNER JOIN (SELECT MEMO.ID, COUNT(MEMO2.DATECREATED)+1 AS OVERALL_RANK FROM MEMO LEFT OUTER JOIN MEMO AS MEMO2 ON MEMO2.DATECREATED > MEMO.DATECREATED GROUP BY 1) AS OVER ON OVER.ID = M.ID
	INNER JOIN TABLEREFERENCE AS T ON M.TABLEID = T.TABLEID
	LEFT OUTER JOIN PART ON (PART.ID = M.RECORDID AND M.TABLEID = -2003201472)
	LEFT OUTER JOIN PO ON (PO.ID = M.RECORDID AND M.TABLEID = 397076832)
	LEFT OUTER JOIN VENDOR ON (VENDOR.ID = M.RECORDID AND M.TABLEID = -850561568)
	LEFT OUTER JOIN CUSTOMER ON (CUSTOMER.ID = M.RECORDID AND M.TABLEID = 2142022944)
GROUP BY 1,2,3,4,5,8,9,10;


CREATE VIEW RANKED_MEMO_PO_PART (DATECREATED,MEMO,RECORDID,TABLEID,USERNAME,RANK,TABLENAME,NUM) AS  
   SELECT
	M.DATECREATED AS DATECREATED,
	M.MEMO AS MEMO,
	M.RECORDID AS RECORDID,
	M.TABLEID AS TABLEID,
	M.USERNAME AS USERNAME,
	COUNT(M2.DATECREATED)+1 AS RANK,
	T.TABLEREFNAME AS TABLENAME,
	COALESCE(PO.NUM, PART.NUM) AS NUM
FROM
	MEMO AS M
	LEFT OUTER JOIN MEMO AS M2 ON (M2.RECORDID = M.RECORDID AND M2.DATECREATED > M.DATECREATED)
	INNER JOIN TABLEREFERENCE AS T ON M.TABLEID = T.TABLEID
	LEFT OUTER JOIN PART ON (PART.ID = M.RECORDID AND M.TABLEID = -2003201472)
	LEFT OUTER JOIN PO ON (PO.ID = M.RECORDID AND M.TABLEID = 397076832)
GROUP BY 1,2,3,4,5,7,8

ORDER BY RANK ASC;


CREATE PROCEDURE TB_INVENTORY_UPDATE
AS BEGIN
merge into TB_INVENTORY
	using ALL_INV
	on ALL_INV.ID = TB_INVENTORY.ID
	when matched then
		update set 
			TB_INVENTORY.QTY = ALL_INV.QTY,
			TB_INVENTORY.UNAVAILABLE = ALL_INV.UNAVAILABLE,
			TB_INVENTORY.DROPSHIP = ALL_INV.DROPSHIP,
			TB_INVENTORY.QTYCOMMITTED = ALL_INV.QTYCOMMITTED,
			TB_INVENTORY.ALLOCATED = ALL_INV.ALLOCATED,
			TB_INVENTORY.ONORDER = ALL_INV.ONORDER,
			TB_INVENTORY.QTYNOTAVAILABLETOPICK = ALL_INV.QTYNOTAVAILABLETOPICK
	when not matched then
		insert (ID, QTY, UNAVAILABLE, DROPSHIP, QTYCOMMITTED, ALLOCATED, ONORDER, QTYNOTAVAILABLETOPICK)
		values (ALL_INV.ID, 
				ALL_INV.QTY,
		        ALL_INV.UNAVAILABLE,
		        ALL_INV.DROPSHIP,
		        ALL_INV.QTYCOMMITTED,
		        ALL_INV.ALLOCATED,
		        ALL_INV.ONORDER,
		        ALL_INV.QTYNOTAVAILABLETOPICK);
END


CREATE PROCEDURE TB_M_LVL_BOM_UPDATE
AS BEGIN
merge into TB_M_LVL_BOM
	using M_LVL_BOM
	on M_LVL_BOM.BOM_ID = TB_M_LVL_BOM.BOM_ID AND M_LVL_BOM.LOW_P_ID = TB_M_LVL_BOM.LOW_P_ID AND M_LVL_BOM.MOTHER_BOM = TB_M_LVL_BOM.MOTHER_BOM
	when matched then
		update set 
			TB_M_LVL_BOM.BOMITEM_TYPEID = M_LVL_BOM.BOMITEM_TYPEID,
			TB_M_LVL_BOM.BOMITEMTYPE_NAME = M_LVL_BOM.BOMITEMTYPE_NAME,
			TB_M_LVL_BOM.QTY = M_LVL_BOM.QTY,
			TB_M_LVL_BOM.LOW_P_DESCRIPTION = M_LVL_BOM.LOW_P_DESCRIPTION,
			TB_M_LVL_BOM.LOW_P_NUM = M_LVL_BOM.LOW_P_NUM,
			TB_M_LVL_BOM.LOW_P_DEFAULTBOMID = M_LVL_BOM.LOW_P_DEFAULTBOMID,
			TB_M_LVL_BOM.UOM_CODE = M_LVL_BOM.UOM_CODE,
			TB_M_LVL_BOM.LEVEL = M_LVL_BOM.LEVEL
	when not matched then
		insert (BOM_ID, BOMITEM_TYPEID, BOMITEMTYPE_NAME, QTY, LOW_P_ID, LOW_P_DESCRIPTION, LOW_P_NUM, LOW_P_DEFAULTBOMID, UOM_CODE, LEVEL, MOTHER_BOM)
		values (M_LVL_BOM.BOM_ID, 
				M_LVL_BOM.BOMITEM_TYPEID,
				M_LVL_BOM.BOMITEMTYPE_NAME,
				M_LVL_BOM.QTY,
				M_LVL_BOM.LOW_P_ID,
				M_LVL_BOM.LOW_P_DESCRIPTION,
				M_LVL_BOM.LOW_P_NUM,
				M_LVL_BOM.LOW_P_DEFAULTBOMID,
				M_LVL_BOM.UOM_CODE,
				M_LVL_BOM.LEVEL,
				M_LVL_BOM.MOTHER_BOM);
END
